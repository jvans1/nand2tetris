/**
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=true, sel=address[0..2], a=lreg0, b=lreg1, c=lreg2, d=lreg3, e=lreg4, f=lreg5, g=lreg6, h=lreg7);
    And(a=lreg0,b=load,out=loada);
    And(a=lreg1,b=load,out=loadb);
    And(a=lreg2,b=load,out=loadc);
    And(a=lreg3,b=load,out=loadd);
    And(a=lreg4,b=load,out=loade);
    And(a=lreg5,b=load,out=loadf);
    And(a=lreg6,b=load,out=loadg);
    And(a=lreg7,b=load,out=loadh);

    RAM8(in=in,load=loada, address=address[3..5], out=outa);
    RAM8(in=in,load=loadb, address=address[3..5], out=outb);
    RAM8(in=in,load=loadc, address=address[3..5], out=outc);
    RAM8(in=in,load=loadd, address=address[3..5], out=outd);
    RAM8(in=in,load=loade, address=address[3..5], out=oute);
    RAM8(in=in,load=loadf, address=address[3..5], out=outf);
    RAM8(in=in,load=loadg, address=address[3..5], out=outg);
    RAM8(in=in,load=loadh, address=address[3..5], out=outh);

    Mux8Way16(a=outa,b=outb,c=outc,d=outd,e=oute,f=outf,g=outg,h=outh, sel=address[0..2], out=out);
}
